

internal class Program
{
  internal static void Main()
  {
    // ここでは、拡張クラスについては説明します。
    // 拡張クラスとは、既存のクラスにメソッドを追加することができる機能です。

    // 例えば、文字列クラスに整数型に変換するメソッドを搭載してみます。
    // このメソッドは、文字列が整数型に変換できる場合には、
    // その整数型の値を返し、変換できない場合には、
    // nullを返します。
    //
    // static class Extensions
    // {
    //   public static int? ToInt(this string str)
    //   {
    //     int result;
    //     return int.TryParse(str, out answer) ? answer : null;
    //   }
    // }
    //
    // このように拡張メソッドを定義すると、
    // すべての文字列に対してTo_Intメソッドを呼び出すことができます。
    // 例えば、
    // string str = "123";
    // int? answer = str.ToInt();
    // とすると、answerには123が代入されます。
    // 一方、
    // string str = "abc";
    // int? answer = str.ToInt();
    // とすると、answerにはnullが代入されます。
    //
    // このように、既存のクラスにメソッドを追加することができるのが、
    // 拡張クラスです。
    // この機能は、拡張メソッドと呼ばれることが多いです。
    //
    // この機能を使うと、既存のクラスにメソッドを追加することができますが、
    // 既存のクラスを変更することはできません。

    Console.WriteLine("1".To_Int() + 1);

    // 拡張メソッドを定義する際には、以下の要件を満たす必要があります。

    // ・staticクラスで定義する。
    // ・ メソッド自体もstaticとする。
    // ・メソッドの第一引数にthisを付ける。
    // ・メソッドの第一引数の型は、既存のクラスの型とする。

    // また、むやみやたらと、拡張メソッドを定義するのは、
    // あまり良い考えではありません。
    // なぜなら、既存のクラスにメソッドを追加することで、
    // そのクラスの役割が拡張されてしまうからです。
    // 例えば、stringクラスにToIntメソッドを追加すると、
    // そのクラスの役割が文字列を表すクラスから、
    // 整数型に変換できる文字列を表すクラスに変わってしまいます。
    // このように、既存のクラスにメソッドを追加することで、
    // そのクラスの役割が拡張されてしまうと、
    // そのクラスの役割が曖昧になってしまいます。

    // そのため、拡張メソッドは、
    // 既存のクラスにメソッドを追加することができるということを
    // 知っておく程度にしておきましょう。

    // 既存のデータ型に対して、知らないメソッドが呼ばれていても理解できませんからね、、、
    // 使用する際には、開発者チーム間でその内容を適切に共有する必要があります。

  }
}


// 文字列を整数に変換するメソッドを追加。
static class Extensions
{
  public static int? To_Int(this string str)
  {
    int answer;
    return int.TryParse(str, out answer) ? answer : null;
  }
}



