// ここでは変数について学習します。
// 変数とは、値を格納するための箱のようなものです。
// 変数には、値を格納するための名前がつけられています。
// 変数の宣言は「データ型 変数名」として行います。
// 例えば、int型の変数aを宣言する場合は「int a」とします。
// また、変数に値を代入する場合は「変数名 = 値」とします。
// 例えば、int型の変数aに値を代入する場合は「a = 1」とします。
// 変数の宣言と代入を同時に行う場合は「データ型 変数名 = 値」とします。
// 例えば、int型の変数aに値を代入する場合は「int a = 1」とします。
// 変数の宣言と代入を同時に行う場合は、データ型を省略することができます。
// 例えば、int型の変数aに値を代入する場合は「var a = 1」とします。
// これはコンパイラが自動で「1」のデータ型を推論し、それを格納する変数に適用してくれるからです。

// 変数名には半角英数字と「_(アンダースコア)」を使用します。
// また、変数名の先頭には数字を使用できません。
// また、C#の予約語は変数名に使用できません。
// 予約語とは、C#の言語仕様で使用されている単語のことです。
// 予約語の一覧は公式ドキュメントを参照してください。
// ref: https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/keywords/
// 日本語文字も使用することができますが、
// 原則として使用するべきではありません。
// また、変数名には「大文字」と「小文字」を区別します。
// 例えば、変数名が「a」と「A」の場合は、別の変数として扱われます。

// では、実際に変数を宣言してみましょう。
// まずは、int型の変数aを宣言してみましょう。
// この時、変数名は「a」とします。
// また、値は「1」とします。

int a = 1;
Console.WriteLine(a);
// >>> 1

// このように、変数aに値を代入することができました。
// 変数aに値を代入することを「変数aに1を代入する」といいます。

// 次にデータ型を推論する変数の宣言を行います。

var b = 1;
Console.WriteLine(b);
// >>> 1

// このように、データ型を推論する変数の宣言もできました。
// このように、データ型を推論する変数の宣言は、
// ある程度のデータ型を推論できる場合に使用することができます。
// 「ある程度」と述べた理由は、「1」は整数型として認識され、「1.0」は浮動小数点型として認識されるためです。
// 必ずしも意図したデータ型を推論いてくれるとは限りません。

// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

// では、次に、変数のスコープについて学習します。
// 変数のスコープとは、変数が有効な範囲のことです。
// 例えば、int型の変数aを宣言した場合、
// その変数aはその変数が宣言されたブロック内でのみ有効です。
// ブロックとは「{...}」で囲まれた範囲のことです。
// 例えば、以下のようなコードを実行した場合、
// 変数aはブロック内でのみ有効なため、ブロック外では変数aは存在しません。
// そのため、変数aをブロック外で使用するとエラーが発生します。

{
  int c = 1;
  Console.WriteLine(c);
  // >>> 1
}
// Console.WriteLine(c); // エラー
// >>> エラー

// また、変数のスコープは、ブロック内でのみ有効なため、
// ブロック内で変数を宣言することを「変数のスコープをブロック内に限定する」といいます。
// 変数がプログラムのイロイロな場所でアクセス可能だと、
// 予期せぬバグの原因になるため、
// 変数のスコープをブロック内に限定することが推奨されています。

// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

// また、変数は「変数 = 値」とすることで、値を更新することができます。
// 例えば、以下のようなコードを実行した場合、

var d = 1;
d = 2;
Console.WriteLine(d);
// >>> 2

// このように、変数dに値を代入することで、変数dの値を更新することができました。
// このように、変数に値を代入することを「変数に値を代入する」といいます。

// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
// ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
// ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

// まちがって、変数を上書きしてしまわないように、
// 変数を不可変(イミュータブル)にすることが可能です。
// これはconstキーワードを使用して実現します。
// 固定数と呼ぶこともあります。

const int e = 1;
// e = 2; // エラー
// >>> エラー

// このように、constキーワードを使用することで、
// 変数を不可変にすることができます。
// このように、変数を不可変にすることを「変数をイミュータブルにする」といいます。
