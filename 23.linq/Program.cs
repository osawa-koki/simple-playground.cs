using System.Collections.Generic;

// ここではLINQについて学習します。
// LINQは、データソースからデータを取得するためのクエリ言語です。
// コレクションなどのIEnumerableを実装しているオブジェクトに対して使用できます。

{
  // ここでは、LINQの基本的な使い方を学習します。
  // まずは、LINQを使用するためのusingディレクティブを記述します。
  // using System.Linq;
  // ここでは自動インポート機能を使用しているため、明示的なインポートは不要ですが、
  // 自動インポート機能をオフにしている場合にはusingディレクティブを使用して明示的にインポートしてください。

  // クエリ式は、from句、where句、select句、order by句、group by句、join句などがあります。
  // これらの句を組み合わせて、LINQのクエリを記述します。

  // LINQには、以下のメソッドが用意されています。
  // ・ Select : データを変換する
  // ・ Where : 条件に合致するデータを抽出する
  // ・ OrderBy : データをソートする
  // ・ GroupBy : データをグループ化する
  // ・ Join : 2つのデータを結合する
  // ・ Distinct : 重複するデータを除外する
  // ・ Skip : 先頭から指定した数だけデータを除外する
  // ・ Take : 先頭から指定した数だけデータを取得する
  // ・ Count : データの数を取得する
  // ・ Sum : データの合計を取得する
  // ・ Average : データの平均を取得する
  // ・ Max : データの最大値を取得する
  // ・ Min : データの最小値を取得する
  // ・ Any : 条件に合致するデータが存在するかどうかを取得する
  // ・ All : 条件に合致するデータがすべて存在するかどうかを取得する
  // ・ First : 条件に合致する最初のデータを取得する
  // ・ FirstOrDefault : 条件に合致する最初のデータを取得する。条件に合致するデータが存在しない場合は、デフォルト値を取得する
  // ・ Single : 条件に合致するデータを1つだけ取得する
  // ・ SingleOrDefault : 条件に合致するデータを1つだけ取得する。条件に合致するデータが存在しない場合は、デフォルト値を取得する
  // ・ Last : 条件に合致する最後のデータを取得する
  // ・ LastOrDefault : 条件に合致する最後のデータを取得する。条件に合致するデータが存在しない場合は、デフォルト値を取得する
  // ・ ElementAt : 指定したインデックスのデータを取得する
  // ・ ElementAtOrDefault : 指定したインデックスのデータを取得する。指定したインデックスのデータが存在しない場合は、デフォルト値を取得する
  // ・ Concat : 2つのデータを連結する
  // ・ Union : 2つのデータを連結する。重複するデータは除外する
  // ・ Intersect : 2つのデータの共通部分を取得する
  // ・ Except : 2つのデータの差分を取得する
  // ・ Reverse : データを逆順にする
  // ・ SequenceEqual : 2つのデータが同じかどうかを取得する
  // ・ DefaultIfEmpty : データが存在しない場合に、デフォルト値を取得する
  // ・ OfType : 指定した型のデータを取得する
  // ・ Cast : 指定した型にキャストする
  // ・ ToArray : データを配列に変換する
  // ・ ToList : データをリストに変換する
  // ・ ToDictionary : データをディクショナリに変換する
  // ・ ToLookup : データをルックアップに変換する
  // ・ AsEnumerable : データを列挙可能なデータに変換する
  // ・ AsQueryable : データをクエリ可能なデータに変換する
  // ・ AsParallel : データを並列処理可能なデータに変換する
  //
  // これらのメソッドは、拡張メソッドとして用意されています。
  // これらのメソッドは、IEnumerable<T>やIQueryable<T>などのインターフェイスに定義されているメソッドです。
  // これらのメソッドは、拡張メソッドとして用意されているため、
  // これらのメソッドを呼び出すためには、using System.Linq;を記述する必要があります。
  //
  // これらのメソッドは、LINQと呼ばれるクエリ構文を使用して記述することもできます。
  // これらのメソッドは、LINQ to Objectsと呼ばれるクエリ構文を使用して記述することもできます。
  // これらのメソッドは、LINQ to SQLと呼ばれるクエリ構文を使用して記述することもできます。
  // これらのメソッドは、LINQ to XMLと呼ばれるクエリ構文を使用して記述することもできます。
  //
  // ref : https://learn.microsoft.com/ja-jp/dotnet/api/system.linq.enumerable?view=net-7.0
}
{
  // Select
  // ・ データを変換する

  // Selectメソッドは、データを変換するメソッドです。
  // Selectメソッドは、データを変換するために、データを引数に取るデリゲートを指定します。
  // Selectメソッドは、データを変換するために、デリゲートを指定します。
  // Selectメソッドは、データを変換するために、ラムダ式を指定します。

  // ラムダ式とは簡単な関数のことだと認識してください。
  // 例えば、引数2つの和を返すラムダは以下のようになります。
  // (x, y) => x + y
  // これを関数で書くと以下のようになります。
  // function(x, y) {
  //   return x + y;
  // }
  // これをメソッドで書くと以下のようになります。
  // public int Add(int x, int y) {
  //   return x + y;
  // }
  // これをデリゲートで書くと以下のようになります。
  // delegate int Add(int x, int y);
  // ラムダ式で書くと非常に簡単に書けることが分かりますね。

  // では、さっそくSelect文を使用して、配列全ての要素を2倍にしてみましょう。

  // まずは、配列を用意します。
  var array = new[] { 1, 2, 3, 4, 5 };

  // 次に、Selectメソッドを使用して、配列全ての要素を2倍にします。
  // Selectメソッドは、データを変換するために、デリゲートを指定します。
  // この場合、デリゲートは、x => x * 2となります。

  var array_select = array.Select(x => x * 2);

  Console.WriteLine($"array.Select(x => x * 2) -> {string.Join(", ", array_select)}");

  // >>> 実行結果
  // array.Select(x => x * 2) -> 2, 4, 6, 8, 10
}
{
  // Where
  // ・ 条件に合致するデータを取得する

  // Whereメソッドは、条件に合致するデータを取得するメソッドです。
  // Whereメソッドは、条件に合致するデータを取得するために、データを引数に取るデリゲートを指定します。
  // 指定したデリゲートは真偽値を返す必要があります。

  // では、さっそくWhere文を使用して、配列全ての要素から偶数のみを取得してみましょう。

  // まずは、配列を用意します。
  var array = new[] { 1, 2, 3, 4, 5 };

  // 次に、Whereメソッドを使用して、配列全ての要素から偶数のみを取得します。
  // Whereメソッドは、条件に合致するデータを取得するために、デリゲートを指定します。
  // この場合、デリゲートは、x => x % 2 == 0となります。

  var array_where = array.Where(x => x % 2 == 0);

  Console.WriteLine($"array.Where(x => x % 2 == 0) -> {string.Join(", ", array_where)}");

  // >>> 実行結果
  // array.Where(x => x % 2 == 0) -> 2, 4
}
{
  // OrderBy
  // ・ データをソートする

  // OrderByメソッドは、データをソートするメソッドです。
  // OrderByメソッドは、データをソートするために、データを引数に取るデリゲートを指定します。
  // 指定したデリゲートは、ソートの基準となる値を返す必要があります。

  // では、さっそくOrderBy文を使用して、配列全ての要素を昇順にソートしてみましょう。

  // まずは、配列を用意します。
  var array_asc = new[] { 1, 2, 3, 4, 5 };

  // 次に、OrderByメソッドを使用して、配列全ての要素を昇順にソートします。
  // OrderByメソッドは、データをソートするために、デリゲートを指定します。
  // この場合、デリゲートは、x => xとなります。

  var array_orderby = array_asc.OrderBy(x => x);

  Console.WriteLine($"array_asc.OrderBy(x => x) -> {string.Join(", ", array_orderby)}");

  // >>> 実行結果
  // array.OrderBy(x => x) -> 1, 2, 3, 4, 5

  // では、さっそくOrderBy文を使用して、配列全ての要素を降順にソートしてみましょう。

  // まずは、配列を用意します。
  var array_desc = new[] { 1, 2, 3, 4, 5 };

  // 次に、OrderByメソッドを使用して、配列全ての要素を降順にソートします。
  // OrderByメソッドは、データをソートするために、デリゲートを指定します。
  // この場合、デリゲートは、x => -xとなります。

  var array_orderby_desc = array_desc.OrderBy(x => -x);

  Console.WriteLine($"array_desc.OrderBy(x => -x) -> {string.Join(", ", array_orderby_desc)}");

  // >>> 実行結果
  // array_desc.OrderBy(x => -x) -> 5, 4, 3, 2, 1

  // ===== ===== ===== ===== =====

  // また、降順に並び替えるために、専用のOrderByDescendingメソッドを使用することもできます。

  Console.WriteLine($"array_desc.OrderByDescending(x => x) -> {string.Join(", ", array_desc.OrderByDescending(x => x))}");
}
{
  // GroupBy
  // ・ データをグループ化する

  // GroupByメソッドは、データをグループ化するメソッドです。
  // GroupByメソッドは、データをグループ化するために、データを引数に取るデリゲートを指定します。
  // 指定したデリゲートは、グループ化の基準となる値を返す必要があります。

  // では、さっそくGroupBy文を使用して、配列全ての要素を偶数と奇数にグループ化してみましょう。

  // まずは、配列を用意します。
  var array = new[] { 1, 2, 3, 4, 5 };

  // 次に、GroupByメソッドを使用して、配列全ての要素を偶数と奇数にグループ化します。
  // GroupByメソッドは、データをグループ化するために、デリゲートを指定します。
  // この場合、デリゲートは、x => x % 2 == 0となります。

  var array_groupby = array.GroupBy(x => x % 2 == 0);

  // GroupByメソッドは、グループ化されたデータを返します。
  // そのため、グループ化されたデータを取得するためには、ForEachメソッドを使用します。

  array_groupby.ToList().ForEach(x =>
  {
    Console.WriteLine($"array.GroupBy(x => x % 2 == 0) -> {string.Join(", ", x)}");
  });

  // >>> 実行結果
  // array.GroupBy(x => x % 2 == 0) -> 1, 3, 5
  // array.GroupBy(x => x % 2 == 0) -> 2, 4
}
